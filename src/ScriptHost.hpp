#pragma once

/**
 * @file ScriptHost.hpp
 *
 * This module declares the ScriptHost class.
 *
 * Â© 2019 by Richard Walters
 */

#include <memory>
#include <stddef.h>

extern "C" {
#include <lua.h>
#include <lualib.h>
#include <lauxlib.h>
}

/**
 * This is the glue layer between the Lua-based systems and the rest of the
 * back-end.
 */
class ScriptHost {
    // Lifecycle Methods
public:
    ~ScriptHost() noexcept;
    ScriptHost(const ScriptHost&) = delete;
    ScriptHost(ScriptHost&&) noexcept = delete;
    ScriptHost& operator=(const ScriptHost&) = delete;
    ScriptHost& operator=(ScriptHost&&) noexcept = delete;

    // Public Methods
public:
    /**
     * This is the constructor of the class.
     */
    ScriptHost();

    /**
     * Return the pointer to the Lua interpreter of this host.
     *
     * @return
     *     The Lua interpreter of this host is returned.
     */
    lua_State* GetLua();

    /**
     * This method executes the given Lua script.
     *
     * @param[in] name
     *     This is the name of the Lua script to execute.
     *
     * @param[in] script
     *     This is the contents Lua script to execute.
     *
     * @return
     *     If there is an error generated by executing the script,
     *     a description of the error is returned.  Otherwise, an
     *     empty string is returned, indicating success.
     */
    std::string LoadScript(
        const std::string& name,
        const std::string& script
    );

    /**
     * This method calls the given Lua global as a function, passing
     * as arguments anything that was pushed onto the stack beforehand.
     *
     * @param[in] luaFunctionName
     *     This is the name of the Lua global function to call.
     *
     * @return
     *     If there is an error generated by calling the function,
     *     a description of the error is returned.  Otherwise, an
     *     empty string is returned, indicating success.
     */
    std::string Call(const std::string& luaFunctionName);

    // Private properties
private:
    /**
     * This contains any platform-specific state for the object.
     */
    struct Impl;

    /**
     * This contains any platform-specific state for the object.
     */
    std::unique_ptr< Impl > impl_;
};
